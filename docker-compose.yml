version: "3.9"

networks:
  app-net: {}   # 고정 네트워크명 유지

volumes:
  pgdata:

services:
  # db
  postgres:
    image: postgres:15
    container_name: ${COMPOSE_PROJECT_NAME}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-net
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  # db table migration
  migrate:
    image: migrate/migrate:4
    container_name: ${COMPOSE_PROJECT_NAME}-migrate
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net
    volumes:
      - ./db/migrations:/migrations:ro
    # 초기 기동 시 최신까지 up. 스키마 변경 시엔 수동 실행 권장.
    command: [
      "-path", "/migrations",
      "-database", "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable",
      "up"
    ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
    restart: "no"

  # SQS 서버
  localstack:
    image: localstack/localstack:latest
    container_name: ${COMPOSE_PROJECT_NAME}-localstack
    restart: unless-stopped
    environment:
      - SERVICES=sqs
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - EDGE_PORT=${LOCALSTACK_EDGE_PORT}
      - DEBUG=0
      - SQS_QUEUE_NAME=${SQS_QUEUE_NAME}
    ports:
      - "${LOCALSTACK_EDGE_PORT}:4566"
    networks:
      - app-net
    volumes:
      - "./.localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: [ "CMD-SHELL", "awslocal sqs list-queues >/dev/null 2>&1 || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 40
      start_period: 15s



    # LocalStack에 SQS 큐 자동 생성 및 검증
  sqs-init:
    image: amazon/aws-cli:2.15.58
    container_name: ${COMPOSE_PROJECT_NAME}-sqs-init
    depends_on:
      localstack:
        condition: service_healthy
    networks: [ app-net ]
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      LOCALSTACK_INTERNAL_URL: "http://localstack:${LOCALSTACK_EDGE_PORT}"
      SQS_QUEUE_NAME: ${SQS_QUEUE_NAME}
    # 멀티라인/개행 문제 방지: 엔트리포인트에 "단 한 줄"로 넣는다.
    entrypoint:
      - /bin/sh
      - -lc
      - >
        set -euo pipefail;
        echo "[sqs-init] wait SQS...";
        until aws --region ${AWS_DEFAULT_REGION} --endpoint-url=${LOCALSTACK_INTERNAL_URL} sqs list-queues >/dev/null 2>&1; do sleep 2; done;
        echo "[sqs-init] create queue: ${SQS_QUEUE_NAME}";
        aws --region ${AWS_DEFAULT_REGION} --endpoint-url=${LOCALSTACK_INTERNAL_URL} sqs create-queue --queue-name ${SQS_QUEUE_NAME} >/dev/null 2>&1 || true;
        echo "[sqs-init] verify url";
        aws --region ${AWS_DEFAULT_REGION} --endpoint-url=${LOCALSTACK_INTERNAL_URL} sqs get-queue-url --queue-name ${SQS_QUEUE_NAME};
        echo "[sqs-init] done"
    restart: "no"
